{"ast":null,"code":"export function sha1(str) {\n  const utf8 = str;\n  const words32 = stringToWords32(utf8, Endian.Big);\n  return _sha1(words32, utf8.length * 8);\n}\nexport function sha1Binary(buffer) {\n  const words32 = arrayBufferToWords32(buffer, Endian.Big);\n  return _sha1(words32, buffer.byteLength * 8);\n}\nfunction _sha1(words32, len) {\n  const w = new Array(80);\n  let [a, b, c, d, e] = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  words32[len >> 5] |= 0x80 << 24 - len % 32;\n  words32[(len + 64 >> 9 << 4) + 15] = len;\n  for (let i = 0; i < words32.length; i += 16) {\n    const [h0, h1, h2, h3, h4] = [a, b, c, d, e];\n    for (let j = 0; j < 80; j++) {\n      if (j < 16) {\n        w[j] = words32[i + j];\n      } else {\n        w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      }\n      const [f, k] = fk(j, b, c, d);\n      const temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n      [e, d, c, b, a] = [d, c, rol32(b, 30), a, temp];\n    }\n    [a, b, c, d, e] = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)];\n  }\n  return byteStringToHexString(words32ToByteString([a, b, c, d, e]));\n}\nfunction add32(a, b) {\n  return add32to64(a, b)[1];\n}\nfunction add32to64(a, b) {\n  const low = (a & 0xffff) + (b & 0xffff);\n  const high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n  return [high >>> 16, high << 16 | low & 0xffff];\n}\nfunction add64(_ref, _ref2) {\n  let [ah, al] = _ref;\n  let [bh, bl] = _ref2;\n  const [carry, l] = add32to64(al, bl);\n  const h = add32(add32(ah, bh), carry);\n  return [h, l];\n}\nfunction sub32(a, b) {\n  const low = (a & 0xffff) - (b & 0xffff);\n  const high = (a >> 16) - (b >> 16) + (low >> 16);\n  return high << 16 | low & 0xffff;\n}\n\n// Rotate a 32b number left `count` position\nfunction rol32(a, count) {\n  return a << count | a >>> 32 - count;\n}\n\n// Rotate a 64b number left `count` position\nfunction rol64(_ref3, count) {\n  let [hi, lo] = _ref3;\n  const h = hi << count | lo >>> 32 - count;\n  const l = lo << count | hi >>> 32 - count;\n  return [h, l];\n}\nvar Endian;\n(function (Endian) {\n  Endian[Endian[\"Little\"] = 0] = \"Little\";\n  Endian[Endian[\"Big\"] = 1] = \"Big\";\n})(Endian || (Endian = {}));\nfunction fk(index, b, c, d) {\n  if (index < 20) {\n    return [b & c | ~b & d, 0x5a827999];\n  }\n  if (index < 40) {\n    return [b ^ c ^ d, 0x6ed9eba1];\n  }\n  if (index < 60) {\n    return [b & c | b & d | c & d, 0x8f1bbcdc];\n  }\n  return [b ^ c ^ d, 0xca62c1d6];\n}\nfunction stringToWords32(str, endian) {\n  const words32 = Array(str.length + 3 >>> 2);\n  for (let i = 0; i < words32.length; i++) {\n    words32[i] = wordAt(str, i * 4, endian);\n  }\n  return words32;\n}\nfunction arrayBufferToWords32(buffer, endian) {\n  const words32 = Array(buffer.byteLength + 3 >>> 2);\n  const view = new Uint8Array(buffer);\n  for (let i = 0; i < words32.length; i++) {\n    words32[i] = wordAt(view, i * 4, endian);\n  }\n  return words32;\n}\nfunction byteAt(str, index) {\n  if (typeof str === 'string') {\n    return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;\n  } else {\n    return index >= str.byteLength ? 0 : str[index] & 0xff;\n  }\n}\nfunction wordAt(str, index, endian) {\n  let word = 0;\n  if (endian === Endian.Big) {\n    for (let i = 0; i < 4; i++) {\n      word += byteAt(str, index + i) << 24 - 8 * i;\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      word += byteAt(str, index + i) << 8 * i;\n    }\n  }\n  return word;\n}\nfunction words32ToByteString(words32) {\n  return words32.reduce((str, word) => str + word32ToByteString(word), '');\n}\nfunction word32ToByteString(word) {\n  let str = '';\n  for (let i = 0; i < 4; i++) {\n    str += String.fromCharCode(word >>> 8 * (3 - i) & 0xff);\n  }\n  return str;\n}\nfunction byteStringToHexString(str) {\n  let hex = '';\n  for (let i = 0; i < str.length; i++) {\n    const b = byteAt(str, i);\n    hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);\n  }\n  return hex.toLowerCase();\n}\n\n// based on http://www.danvk.org/hex2dec.html (JS can not handle more than \nfunction byteStringToDecString(str) {\n  let decimal = '';\n  let toThePower = '1';\n  for (let i = str.length - 1; i >= 0; i--) {\n    decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));\n    toThePower = numberTimesBigInt(256, toThePower);\n  }\n  return decimal.split('').reverse().join('');\n}\n\n// x and y decimal, lowest significant digit first\nfunction addBigInt(x, y) {\n  let sum = '';\n  const len = Math.max(x.length, y.length);\n  for (let i = 0, carry = 0; i < len || carry; i++) {\n    const tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);\n    if (tmpSum >= 10) {\n      carry = 1;\n      sum += tmpSum - 10;\n    } else {\n      carry = 0;\n      sum += tmpSum;\n    }\n  }\n  return sum;\n}\nfunction numberTimesBigInt(num, b) {\n  let product = '';\n  let bToThePower = b;\n  for (; num !== 0; num = num >>> 1) {\n    if (num & 1) product = addBigInt(product, bToThePower);\n    bToThePower = addBigInt(bToThePower, bToThePower);\n  }\n  return product;\n}","map":{"version":3,"names":["sha1","str","utf8","words32","stringToWords32","Endian","Big","_sha1","length","sha1Binary","buffer","arrayBufferToWords32","byteLength","len","w","Array","a","b","c","d","e","i","h0","h1","h2","h3","h4","j","rol32","f","k","fk","temp","reduce","add32","byteStringToHexString","words32ToByteString","add32to64","low","high","add64","ah","al","bh","bl","carry","l","h","sub32","count","rol64","hi","lo","index","endian","wordAt","view","Uint8Array","byteAt","charCodeAt","word","word32ToByteString","String","fromCharCode","hex","toString","toLowerCase","byteStringToDecString","decimal","toThePower","addBigInt","numberTimesBigInt","split","reverse","join","x","y","sum","Math","max","tmpSum","num","product","bToThePower"],"sources":["/home/tayrocha/Documentos/Estudos/frontend/src/utils/sha1.ts"],"sourcesContent":["export function sha1(str: string): string {\n  const utf8 = str;\n  const words32 = stringToWords32(utf8, Endian.Big);\n  return _sha1(words32, utf8.length * 8);\n}\n\nexport function sha1Binary(buffer: ArrayBuffer): string {\n  const words32 = arrayBufferToWords32(buffer, Endian.Big);\n  return _sha1(words32, buffer.byteLength * 8);\n}\n\nfunction _sha1(words32: number[], len: number): string {\n  const w = new Array(80);\n  let [a, b, c, d, e]: number[] = [0x67452301, 0xefcdab89, 0x98badcfe, \n0x10325476, 0xc3d2e1f0];\n\n  words32[len >> 5] |= 0x80 << (24 - len % 32);\n  words32[((len + 64 >> 9) << 4) + 15] = len;\n\n  for (let i = 0; i < words32.length; i += 16) {\n     const [h0, h1, h2, h3, h4]: number[] = [a, b, c, d, e];\n\n    for (let j = 0; j < 80; j++) {\n      if (j < 16) {\n       w[j] = words32[i + j];\n      } else {\n        w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      }\n\n      const [f, k] = fk(j, b, c, d);\n      const temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n      [e, d, c, b, a] = [d, c, rol32(b, 30), a, temp];\n    }\n\n    [a, b, c, d, e] = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)];\n  }\n\n  return byteStringToHexString(words32ToByteString([a, b, c, d, e]));\n}\n\nfunction add32(a: number, b: number): number {\n  return add32to64(a, b)[1];\n}\n\nfunction add32to64(a: number, b: number): [number, number] {\n  const low = (a & 0xffff) + (b & 0xffff);\n  const high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n  return [high >>> 16, (high << 16) | (low & 0xffff)];\n}\n\nfunction add64([ah, al]: [number, number], [bh, bl]: [number, number]): [number, number] {\n  const [carry, l] = add32to64(al, bl);\n  const h = add32(add32(ah, bh), carry);\n  return [h, l];\n}\n\nfunction sub32(a: number, b: number): number {\n  const low = (a & 0xffff) - (b & 0xffff);\n  const high = (a >> 16) - (b >> 16) + (low >> 16);\n  return (high << 16) | (low & 0xffff);\n}\n\n// Rotate a 32b number left `count` position\nfunction rol32(a: number, count: number): number {\n   return (a << count) | (a >>> (32 - count));\n}\n\n// Rotate a 64b number left `count` position\nfunction rol64([hi, lo]: [number, number], count: number): [number, number] {\n  const h = (hi << count) | (lo >>> (32 - count));\n  const l = (lo << count) | (hi >>> (32 - count));\n  return [h, l];\n}\n\nenum Endian {\n  Little,\n  Big,\n}\n\nfunction fk(index: number, b: number, c: number, d: number): [number, number] {\n  if (index < 20) {\n    return [(b & c) | (~b & d), 0x5a827999];\n  }\n\n  if (index < 40) {\n    return [b ^ c ^ d, 0x6ed9eba1];\n  }\n\n  if (index < 60) {\n     return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];\n  }\n\n  return [b ^ c ^ d, 0xca62c1d6];\n}\n\n\nfunction stringToWords32(str: string, endian: Endian): number[] {\n  const words32 = Array((str.length + 3) >>> 2);\n\n  for (let i = 0; i < words32.length; i++) {\n    words32[i] = wordAt(str, i * 4, endian);\n  }\n\n  return words32;\n}\n\nfunction arrayBufferToWords32(buffer: ArrayBuffer, endian: Endian): number[] {\n  const words32 = Array((buffer.byteLength + 3) >>> 2);\n  const view = new Uint8Array(buffer);\n  for (let i = 0; i < words32.length; i++) {\n    words32[i] = wordAt(view, i * 4, endian);\n  }\n  return words32;\n}\n\nfunction byteAt(str: string | Uint8Array, index: number): number {\n  if (typeof str === 'string') {\n    return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;\n  } else {\n    return index >= str.byteLength ? 0 : str[index] & 0xff;\n  }\n}\n\nfunction wordAt(str: string | Uint8Array, index: number, endian: Endian): number {\n  let word = 0;\n  if (endian === Endian.Big) {\n     for (let i = 0; i < 4; i++) {\n      word += byteAt(str, index + i) << (24 - 8 * i);\n     }\n  } else {\n    for (let i = 0; i < 4; i++) {\n       word += byteAt(str, index + i) << 8 * i;\n    }\n  }\n  return word;\n}\n\nfunction words32ToByteString(words32: number[]): string {\n  return words32.reduce((str, word) => str + word32ToByteString(word), '');\n}\n\nfunction word32ToByteString(word: number): string {\n  let str = '';\n  for (let i = 0; i < 4; i++) {\n     str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);\n  }\n  return str;\n}\n\nfunction byteStringToHexString(str: string): string {\n  let hex: string = '';\n  for (let i = 0; i < str.length; i++) {\n    const b = byteAt(str, i);\n    hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);\n  }\n  return hex.toLowerCase();\n}\n\n// based on http://www.danvk.org/hex2dec.html (JS can not handle more than \nfunction byteStringToDecString(str: string): string {\n  let decimal = '';\n  let toThePower = '1';\n\n  for (let i = str.length - 1; i >= 0; i--) {\n    decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), \ntoThePower));\n    toThePower = numberTimesBigInt(256, toThePower);\n  }\n\n  return decimal.split('').reverse().join('');\n} \n\n// x and y decimal, lowest significant digit first\nfunction addBigInt(x: string, y: string): string {\n  let sum = '';\n  const len = Math.max(x.length, y.length);\n  for (let i = 0, carry = 0; i < len || carry; i++) {\n    const tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);\n    if (tmpSum >= 10) {\n      carry = 1;\n      sum += tmpSum - 10;\n    } else {\n      carry = 0;\n      sum += tmpSum;\n    }\n  }\n\n  return sum;\n}\n\n\nfunction numberTimesBigInt(num: number, b: string): string {\n  let product = '';\n  let bToThePower = b;\n  for (; num !== 0; num = num >>> 1) {\n     if (num & 1) product = addBigInt(product, bToThePower);\n    bToThePower = addBigInt(bToThePower, bToThePower);\n  }\nreturn product;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}